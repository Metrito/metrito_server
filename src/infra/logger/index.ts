/**
 * Log Types:
 * - Activity Logs: Capture all application events without filtering.
 * - Error Logs: Document all error events occurring within the application.
 * - HTTP Error Logs: Record logs automatically generated by HTTP requests
 *   that conclude with an error status (500~599).
 *
 * The "activity" and "error" logs belong to the default Winston instance, which
 * is returned by the buildLogger function.
 *
 * Meanwhile, the "HTTP error" logs belong to the expressWinston instance, which
 * is returned by the buildExpressLogger function.
 */

import { Chalk } from 'chalk';
import expressWinston from 'express-winston';
import { clone } from 'lodash';
import winston, { createLogger } from 'winston';

import addTransports from './addTransports';
import loggerConfig from './config';
import { consoleTransports } from './transports/consoleTransports';
import { databaseHttpTransports } from './transports/databaseHttpTransports';
import { databaseTransports } from './transports/databaseTransports';
import { fileHttpTransports } from './transports/fileHttpTransports';
import { fileTransports } from './transports/fileTransports';

/**
 * Returns the instance of the default Winston logger.
 * This logger is used to display information, errors, and other events throughout
 * the application.
 */
function buildLogger() {
  const loggerMainInstance = createLogger({
    level: loggerConfig.SHOW_DEBUG_LOGS ? 'debug' : 'info',
  });

  addTransports(loggerMainInstance, consoleTransports);
  addTransports(loggerMainInstance, fileTransports);
  addTransports(loggerMainInstance, databaseTransports);

  type Logger = winston.Logger & {
    context: (context: string, color?: Chalk) => winston.Logger;
  };

  const logger = clone(loggerMainInstance) as Logger;

  logger.context = (context, color) => {
    const contextColored = color ? color(context) : context;

    return logger.child({ _logs_context: contextColored });
  };

  return logger;
}

/**
 * Returns an expressWinston logger middleware.
 * This type of logger is automatically generated when a request returns
 * an error status (500~599).
 */
function buildExpressLogger() {
  const loggerMiddleware = expressWinston.logger({
    transports: [...fileHttpTransports, ...databaseHttpTransports],
    statusLevels: true,
    meta: true,
    expressFormat: true,
  });

  return loggerMiddleware;
}

const mainLogger = buildLogger();
const httpLogger = buildExpressLogger();

export { mainLogger, httpLogger };
