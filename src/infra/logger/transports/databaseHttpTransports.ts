import 'winston-mongodb';

import moment from 'moment';
import { format, transports } from 'winston';

import utils from '@shared/utils';

import loggerConfig from '../config';

import type { MongoDBTransportInstance } from 'winston-mongodb';

/**
 * Format for logging HTTP-related information to the database.
 */
const databaseHttpFormat = format.combine(
  /**
   * Display the timestamp (date and time) when the log was added.
   */
  format.timestamp(),

  /**
   * Inject the path where the log was triggered.
   * Corrects the UTC of the timestamp.
   */
  format((info) => {
    const path = utils.currentPath();
    info.path = path || null;

    if (info.timestamp) {
      info.timestamp = moment(info.timestamp).utc(true).format();
    }

    return info;
  })(),

  /**
   * Inject metadata fields generated by requests and responses.
   */
  format.metadata({
    fillExcept: ['message', 'level', 'timestamp', 'path'],
  }),

  /**
   * Format the log as JSON.
   */
  format.json(),

  /**
   * Make the JSON readable.
   */
  format.prettyPrint(),
);

type Transport = transports.FileTransportInstance | MongoDBTransportInstance;

const databaseHttpTransports: Transport[] = [];

if (loggerConfig.DATABASE_STORE_HTTP_ERROR_LOGS) {
  databaseHttpTransports.push(
    new transports.MongoDB({
      options: { useUnifiedTopology: true },
      db: loggerConfig.DATABASE_URL,
      collection: loggerConfig.HTTP_ERROR_LOGS_COLLECTION,
      format: databaseHttpFormat,
      level: loggerConfig.INCLUDES_400_ERRORS ? 'warn' : 'error',
    }),
  );
}

export { databaseHttpTransports };
